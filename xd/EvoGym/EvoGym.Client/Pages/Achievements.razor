@page "/achievements"
@using EvoGym.Services
@inject IGameService GameService

<div class="container">
    <h2>Achievements</h2>

    <div class="points-summary">
        <h3>Total Points: @userPoints</h3>
    </div>

    <div class="achievements-grid">
        @foreach (var achievement in achievements)
        {
            <div class="achievement-card @(achievement.IsCompleted ? "completed" : "")">
                <h4>@achievement.Name</h4>
                <p>@achievement.Description</p>
                <p>Points: @achievement.PointsValue</p>
                @if (achievement.IsCompleted)
                {
                    <div class="completed-badge">
                        <span>Completed on @achievement.CompletedDate?.ToShortDateString()</span>
                    </div>
                }
            </div>
        }
    </div>

    <div class="leaderboard">
        <h3>Leaderboard</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Rank</th>
                    <th>User</th>
                    <th>Points</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < leaderboard.Count; i++)
                {
                    var user = leaderboard[i];
                    <tr>
                        <td>@(i + 1)</td>
                        <td>@user.Username</td>
                        <td>@user.Points</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<Achievement> achievements = new();
    private List<User> leaderboard = new();
    private int userPoints;

    protected override async Task OnInitializedAsync()
    {
        achievements = await GameService.GetUserAchievements();
        userPoints = await GameService.GetUserPoints();
        leaderboard = await GameService.GetLeaderboard();
    }
}